#!/usr/bin/env zsh
#
# bootstrap installs things.
#
set -eu
#set -o xtrace
# set `magic` variables for current file and dir
__dir="$(cd "$(dirname "$0")" && pwd)"
__file="${__dir}/$(basename "$0")"
__base="$(basename ${__file})"
__root="$(cd "$(dirname "${__dir}")" && pwd)"

DOT_CONFIG="$HOME/.dotconfig"
DOT_UPDATE=0
DOT_UNATTENDED=0

check_prequesits() {
  # check if script called with sudo
  if [[ "${SUDO_USER-}" ]]; then
    fail "You need to call this script without 'sudo'." 2
  fi

    # check if 'zsh' is login shell
    test "$(expr "$SHELL" : '.*/\(.*\)')" != "zsh" && \
      fail "You need to install 'zsh' and make it your login-shell first." && \
      fail "You can call '$__dir/bootsrap' to do so." 2

    # check if 'git' is available and install it otherwise
    if [[ -z $(command -v "git") ]]; then
      info "Installing 'git'"
      if [[ $IS_LINUX ]]; then
        linux_install git
      elif [[ $IS_MAC ]]; then
        brew_install git
      fi
      success "Done"
    fi
  }

check_update() {
  info "Checking for updates"
  # todo: git fetch for update, pull update if needed
}

generate_zshenv() {
  # we generate a ~/.zshenv for some exports including $ZDOTDIR
  info 'Genereate ~/.zshenv'
  local env_file="$HOME/.zshenv"

  if [[ $DOT_UPDATE -eq 0 ]]; then

    if [ -f "$env_file" ]; then
      mv "$env_file" "$env_file".backup
      success "moved $env_file to $env_file.backup"
    fi

    touch "$env_file"
    echo "##############################################################" >> "$env_file"
    echo "# generated by $DOTFILES/script/bootstrap" >> "$env_file"
    echo "##############################################################" >> "$env_file"
    echo ""
    echo "export XDG_CONFIG_HOME='$XDG_CONFIG_HOME'" >> "$env_file"
    echo "export XDG_CACHE_HOME='$XDG_CACHE_HOME'" >> "$env_file"
    echo "export XDG_DATA_HOME='$XDG_DATA_HOME'" >> "$env_file"
    echo "export XDG_RUNTIME_DIR='$XDG_RUNTIME_DIR'" >> "$env_file"
    echo "export XDG_CODE_HOME='$XDG_CODE_HOME'" >> "$env_file"
    echo "export XDG_LOCAL_BIN='$XDG_LOCAL_BIN'" >> "$env_file"
    echo "" >> "$env_file"
    echo "export DOTFILES='$DOTFILES'" >> "$env_file"
    echo "export ZDOTDIR='$ZDOTDIR'" >> "$env_file"
    echo "" >> "$env_file"
    echo "export EDITOR='nvim'" >> "$env_file"
    echo "export VEDITOR='vscodium'" >> "$env_file"
    echo "export PAGER='most'" >> "$env_file"
    echo ""
    echo '[[ -f "$HOME/.zshenv.local" ]] && source "$HOME/.zshenv.local"'
    echo "##############################################################" >> "$env_file"
    success "Created ~/.zshenv\n"
  else
    skip "Skipping because of update\n"
    #todo: patch file
  fi
}

install_apps() {
  info "Installing applications..."
  local p_fl="--$INSTALL_FLAVOUR"
  local p_up=""
  local p_hb=""
  [[ $DOT_UPDATE -eq 1 ]] && p_up="--update"
  if [[ $INSTALL_HOMEBREW == "true" ]]; then
    p_hb="--brew"
    [ -z $(command -v brew) ] && (echo "need to install homebrew:\n"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)")

    source "$__root"/homebrew/path.zsh
  fi

  zsh -eu "$__dir/install_apps" $p_fl $p_up $p_hb
  info "Applications instaled"
}

install_components() {
  info "Installing components..."
  local p_fl="--$INSTALL_FLAVOUR"
  local p_up=""
  local p_hb=""
  local p_fn=""
  [[ $DOT_UPDATE -eq 1 ]] && p_up="--update"
  [[ $INSTALL_HOMEBREW == "true" ]] && p_hb="--brew"
  [[ $INSTALL_FONTS == "false" ]] && p_fn="--no-fonts"
  # find all installers, sort them and run them iteratively, except ourself
  find . -maxdepth 2 -mindepth 2 -type f -name install -not -path '*script*' |
    while read -r installer; do
      echo ""
      info "Installing $installer"
      zsh -eu "$installer" $p_fl $p_up $p_hb $p_fn
    done
    success "Components installed"
  }

read_config() {
  info "Reading config file ($DOT_CONFIG)"

  FL_DEF="light"
  HB_DEF="false"
  FN_DEF="false"
  [[ $DOT_KERNEL == "darwin" ]] && HB_DEF="true" && FL_DEF="full" && FN_DEF="true"

  set +o errexit

  INSTALL_FLAVOUR=$(git config --file "$DOT_CONFIG" --get install.flavour)
  [[ $? -gt 0 ]] && INSTALL_FLAVOUR="$FL_DEF"
  INSTALL_HOMEBREW=$(git config --file "$DOT_CONFIG" --get install.useHomebrew)
  [[ $? -gt 0 ]] && INSTALL_HOMEBREW="$HB_DEF"
  INSTALL_FONTS=$(git config --file "$DOT_CONFIG" --get install.fonts)
  [[ $? -gt 0 ]] && INSTALL_FONTS="$FN_DEF"

  XDG_CONFIG_HOME=$(git config --file "$DOT_CONFIG" --get dirs.xdgConfigHome)
  [[ $? -gt 0 ]] && XDG_CONFIG_HOME="$HOME/.config"
  XDG_CACHE_HOME=$(git config --file "$DOT_CONFIG" --get dirs.xdgCacheHome)
  [[ $? -gt 0 ]] && XDG_CACHE_HOME="$HOME/.cache"
  XDG_LOCAL_BIN=$(git config --file "$DOT_CONFIG" --get dirs.xdgLocalBin)
  [[ $? -gt 0 ]] && XDG_LOCAL_BIN="$HOME/.local/bin"
  XDG_DATA_HOME=$(git config --file "$DOT_CONFIG" --get dirs.xdgDataHome)
  [[ $? -gt 0 ]] && XDG_DATA_HOME="$HOME/.local/share"
  XDG_RUNTIME_DIR=$(git config --file "$DOT_CONFIG" --get dirs.xdgRuntimeDir)
  [[ $? -gt 0 ]] && XDG_RUNTIME_DIR="/tmp/$USER"
  XDG_CODE_HOME=$(git config --file "$DOT_CONFIG" --get dirs.xdgCodeHome)
  [[ $? -gt 0 ]] && XDG_CODE_HOME="$HOME/Dev"
  DOTFILES=$(git config --file "$DOT_CONFIG" --get dirs.dotfiles)
  [[ $? -gt 0 ]] && DOTFILES="$XDG_CONFIG_HOME/dotfiles"

  set -o errexit
}

setup_config() {
  info "Setup dofiles configuration"

    # check for an existing configuration and read the configuration from it, we're using 'git config'
    # with the file-paramter as universal config tool. If an configuration file exists, we perfom an
    # unattended installation.
    if [[ ! -f "$DOT_CONFIG" ]]; then
      touch "$DOT_CONFIG"
      git config --file "$DOT_CONFIG" --add install.installDate "$(date)"
    else
      DOT_UNATTENDED=1
    fi
    read_config

    # ask for values, if not silent
    if [[ $DOT_UNATTENDED -eq 0 ]]; then

      info "There is a 'full' and a 'light' flavour, choose which you like to install."
      info "The 'light' version might be better suited for headless server setups"
      info "by for example not installing the coc.vim plugin and its dependencies (nodejs)."
      local flavour=$(user_read "Install the 'full' or 'light' version?" "$INSTALL_FLAVOUR")
      if [[ $flavour == "full" ]] || [[ $flavour == "f" ]] || [[ $flavour == "F" ]]; then
        INSTALL_FLAVOUR="full"
      elif [[ $flavour == "light" ]] || [[ $flavour == "l" ]] || [[ $flavour == "L" ]]; then
        INSTALL_FLAVOUR="light"
      else
        fail "Invalid option: $flavour. Choose 'full' or 'light'" 2
      fi

      if [[ $DOT_KERNEL == "linux" ]]; then
        local fn=$(user_yesno "Do you want to install fonts (not really needed for headless systems)?")
        [[ $fn -eq 1 ]] && INSTALL_FONTS="true" || INSTALL_FONTS="false"
      fi

      if [[ $DOT_KERNEL == "linux" ]]; then
        local hb=$(user_yesno "EXPERIMENTAL: Do you want to use 'homebrew' ('linuxbrew') for the installation?")
        [[ $hb -eq 1 ]] && INSTALL_HOMEBREW="true" || INSTALL_HOMEBREW="false"
      fi

      XDG_CONFIG_HOME=$(user_read "Specify your XDG_CONFIG_HOME directory  " "$XDG_CONFIG_HOME")
      XDG_CACHE_HOME=$(user_read  "Specify your XDG_CACHE_HOME directory   " "$XDG_CACHE_HOME")
      XDG_LOCAL_BIN=$(user_read   "Specify your XDG_LOCAL_BIN directory    " "$XDG_LOCAL_BIN")
      XDG_DATA_HOME=$(user_read   "Specify your XDG_DATA_HOME directory    " "$XDG_DATA_HOME")
      XDG_CODE_HOME=$(user_read   "Specify your XDG_CODE_HOME directory    " "$XDG_CODE_HOME")
      XDG_RUNTIME_DIR=$(user_read "Specify your XDG_RUNTIME_DIR directory  " "$XDG_RUNTIME_DIR")
      DOTFILES=$(user_read        "Specify your DOTFILES directory         " "$DOTFILES")
      echo ""
    else
      skip "Unattended install, using previously provided data"
      echo "       XDG_CONFIG_HOME  :   $XDG_CONFIG_HOME"
      echo "       XDG_CACHE_HOME   :   $XDG_CACHE_HOME"
      echo "       XDG_LOCAL_BIN    :   $XDG_LOCAL_BIN"
      echo "       XDG_DATA_HOME    :   $XDG_DATA_HOME"
      echo "       XDG_CODE_HOME    :   $XDG_CODE_HOME"
      echo "       XDG_RUNTIME_DIR  :   $XDG_RUNTIME_DIR"
      echo "       DOTFILES         :   $DOTFILES"
      echo ""
    fi

    git config --file "$DOT_CONFIG" --replace-all install.flavour "$INSTALL_FLAVOUR"
    git config --file "$DOT_CONFIG" --replace-all install.useHomebrew "$INSTALL_HOMEBREW"
    git config --file "$DOT_CONFIG" --replace-all install.fonts "$INSTALL_FONTS"
    git config --file "$DOT_CONFIG" --replace-all dirs.xdgConfigHome "$XDG_CONFIG_HOME"
    git config --file "$DOT_CONFIG" --replace-all dirs.xdgCacheHome "$XDG_CACHE_HOME"
    git config --file "$DOT_CONFIG" --replace-all dirs.xdgLocalBin "$XDG_LOCAL_BIN"
    git config --file "$DOT_CONFIG" --replace-all dirs.xdgDataHome "$XDG_DATA_HOME"
    git config --file "$DOT_CONFIG" --replace-all dirs.xdgRuntimeDir "$XDG_RUNTIME_DIR"
    git config --file "$DOT_CONFIG" --replace-all dirs.xdgCodeHome "$XDG_CODE_HOME"
    git config --file "$DOT_CONFIG" --replace-all dirs.dotfiles "$DOTFILES"

    export XDG_CONFIG_HOME=$XDG_CONFIG_HOME
    export XDG_CACHE_HOME=$XDG_CACHE_HOME
    export XDG_DATA_HOME=$XDG_DATA_HOME
    export XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR

    export XDG_CODE_HOME=$XDG_CODE_HOME
    export DOTFILES=$DOTFILES
    export XDG_LOCAL_BIN=$XDG_LOCAL_BIN

    export ZDOTDIR="$DOTFILES/zsh"
  }

setup_directories() {
  info "Setting up directories"
  [[ ! -d $XDG_CONFIG_HOME ]] && mkdir -p $XDG_CONFIG_HOME
  [[ ! -d $XDG_DATA_HOME ]] && mkdir -p $XDG_DATA_HOME
  [[ ! -d $XDG_CACHE_HOME ]] && mkdir -p $XDG_CACHE_HOME
  [[ ! -d $XDG_LOCAL_BIN ]] && mkdir -p $XDG_LOCAL_BIN
  [[ ! -d $XDG_CODE_HOME ]] && mkdir -p $XDG_CODE_HOME
  [[ ! -d $XDG_RUNTIME_DIR ]] && mkdir -p $XDG_RUNTIME_DIR
  [[ ! -d $DOTFILES ]] && mkdir -p $DOTFILES
  success "Directories created\n"
}

setup_gitconfig() {
  info 'Setup ~/.gitconfig'
  # if there is no user.email, we'll assume it's a new setup and ask for it
  if [ -z "$(git config --global --get user.email)" ]; then
    user_name=$(user_read "What is your github author name?")
    user_email=$(user_read "What is your github author email?")
    git config --global user.name "$user_name"
    git config --global user.email "$user_email"
  fi
  # include the gitconfig.local file, symlink to $DOTILES/git/.gitconfig.local
  git config --global include.path "$HOME/.gitconfig.local"
  success 'Done\n'
}

usage() {
  echo ""
  echo "Dotfiles installation"
  echo ""
  echo "  The installer creates a configuration file '~/.dotconfig' in which"
  echo "  it stores information you give during the first install as well as"
  echo "  information about the installed version. The installer uses this information"
  echo "  for future executions. If you want a 'clean' install just delete the file"
  echo "  and run the installer"
  echo "Usage:"
  echo "  -u | --update"
  echo "        Perform an update instead a full installation"
  echo "  -h | --help"
  echo "        Show this help"
  echo ""

}

while [ "${1-}" != "" ]; do
  case $1 in
    -u | --update )  DOT_UPDATE=1
      ;;
    -h | --help )    usage
      ;;
    * )              usage
      exit 1
  esac
  shift
done

cd "$__root"
source "$__root/script/functions"
echo ""

check_prequesits
setup_config
setup_directories
if [[ $DOT_UPDATE -eq 1 ]]; then
  check_update
else
  setup_gitconfig
  generate_zshenv
fi
install_apps
install_components
